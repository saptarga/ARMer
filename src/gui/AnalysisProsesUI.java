/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnalysisProsesUI.java
 *
 * Created on 11 Mar 11, 9:47:27
 */
package gui;

import java.awt.Component;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import marketbasketanalysis.Apriori;
import marketbasketanalysis.Fuzzy;
import marketbasketanalysis.log;

/**
 *
 * @author Panji
 */
public class AnalysisProsesUI extends javax.swing.JFrame implements log {

    private Date from;
    private Date until;
    private boolean useexisting = false;
    private boolean bydate = false;
    private String fromDate = "";
    private String untilDate = "";
    private String prefix = "";
    static Double minsupport;
    static Double minconfidence;
    static int maximumItem = 0;
    static int inputIndividuK = 2;
    static int algoritma = 1;//1.Apriori , 2.Fuzzy c-Covering
    static boolean individuSupport = false;
    static boolean loop = false;

    /** Creates new form AnalysisProsesUI */
    public AnalysisProsesUI(Boolean useexisting) {
        initComponents();
        this.setIconImage(new ImageIcon("src/gui/icon.png").getImage());
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) this.getSize().getWidth() / 2, (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) this.getSize().getHeight() / 2);
        this.useexisting = useexisting;
        if (useexisting == true) {
            bydateCheck.setEnabled(false);
        }
    }

    private AnalysisProsesUI() {
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) this.getSize().getWidth() / 2, (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) this.getSize().getHeight() / 2);
        this.setIconImage(new ImageIcon("src/gui/icon.png").getImage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        algorithmCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        minsupportText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        minconfidenceText = new javax.swing.JTextField();
        maxitemLabel = new javax.swing.JLabel();
        maxitemText = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        individuCheck = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bydateCheck = new javax.swing.JCheckBox();
        fromChooser = new com.toedter.calendar.JDateChooser();
        untilChooser = new com.toedter.calendar.JDateChooser();
        backButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        viewresultButton = new javax.swing.JButton();
        savelogButton = new javax.swing.JButton();
        progress = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        prefixText = new javax.swing.JTextField();
        ProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Market Basket Analyzer | Analysis Process");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Algorithm");

        algorithmCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Apriori", "Fuzzy c-Covering" }));
        algorithmCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                algorithmComboItemStateChanged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Minimum Support");

        jLabel3.setText("Minimum Confidence");

        maxitemLabel.setText("Maximum Item Threshold");

        maxitemText.setEditable(false);

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        individuCheck.setText("Individual Minimum Support");
        individuCheck.setEnabled(false);
        individuCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                individuCheckItemStateChanged(evt);
            }
        });

        jLabel5.setText("from");

        jLabel6.setText("until");

        bydateCheck.setText("Select transaction by date");
        bydateCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bydateCheckItemStateChanged(evt);
            }
        });

        fromChooser.setDateFormatString("yyyy-MM-dd");
        fromChooser.setEnabled(false);

        untilChooser.setDateFormatString("yyyy-MM-dd");
        untilChooser.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(maxitemLabel))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submitButton)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(minconfidenceText, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(minsupportText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                                .addComponent(maxitemText))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(individuCheck)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(44, 44, 44)
                                    .addComponent(untilChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(44, 44, 44)
                            .addComponent(fromChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                        .addComponent(bydateCheck, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bydateCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fromChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(untilChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(individuCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(minsupportText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minconfidenceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxitemText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxitemLabel))
                        .addGap(23, 23, 23)
                        .addComponent(submitButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3)))
                .addContainerGap())
        );

        backButton.setText("Main Menu");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        viewresultButton.setText("view result");
        viewresultButton.setEnabled(false);
        viewresultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewresultButtonActionPerformed(evt);
            }
        });

        savelogButton.setText("save log");
        savelogButton.setEnabled(false);
        savelogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savelogButtonActionPerformed(evt);
            }
        });

        progress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progress.setText("Ready");
        progress.setEnabled(false);

        jLabel4.setText("Result Table Prefix");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(algorithmCombo, 0, 145, Short.MAX_VALUE)
                            .addComponent(prefixText, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)))
                    .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(savelogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewresultButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(36, 36, 36)
                        .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(prefixText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(algorithmCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savelogButton)
                    .addComponent(viewresultButton))
                .addContainerGap())
        );

        log.setColumns(20);
        log.setEditable(false);
        log.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        new MainGUI().setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void viewresultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewresultButtonActionPerformed
        // TODO add your handling code here:
        new ViewResult().setVisible(true);
        dispose();
    }//GEN-LAST:event_viewresultButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        try {
            ProgressBar.setIndeterminate(true);
            if (algoritma == 1) {
                Process(fromDate, untilDate, minsupport, minconfidence, prefix, individuSupport, log, algoritma, maximumItem, useexisting);
                startButton.setEnabled(false);
                progress.setEnabled(true);
            } else if (algoritma == 2) {
                Process(fromDate, untilDate, minsupport, minconfidence, prefix, individuSupport, log, algoritma, maximumItem, useexisting);
                startButton.setEnabled(false);
                progress.setEnabled(true);
            } else if (minconfidenceText.getText().isEmpty() == true
                    || minsupportText.getText().isEmpty() == true) {
                log.append("Parameter Incomplete or Wrong Value" + "\n");
            }
        } catch (NullPointerException nullPointerException) {
            ProgressBar.setIndeterminate(false);
            log.append("Parameter Incomplete or Wrong Value" + "\n");
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        //TODO add your handling code here:
        try {
            if (algoritma == 1) {
                minsupport = Double.parseDouble(minsupportText.getText());
                minconfidence = Double.parseDouble(minconfidenceText.getText());
                log.append("Parameter" + "\n");
                log.append("minsupport : " + minsupport + "\n" + "minconfidence : " + minconfidence + "\n");
                getPrefixAndDate();
            } else if (algoritma == 2) {
                if (useexisting == false) {
                    maximumItem = Integer.parseInt(maxitemText.getText());
                    log.append("maximum item threshold : " + maximumItem + "\n");
                }
                minsupport = Double.parseDouble(minsupportText.getText());
                minconfidence = Double.parseDouble(minconfidenceText.getText());
                log.append("Parameter" + "\n");
                log.append("minsupport : " + minsupport + "\n" + "minconfidence : " + minconfidence + "\n");
                getPrefixAndDate();
            }
            System.out.println(algoritma);
        } catch (NumberFormatException numberFormatException) {
            log.append("Parameter Incomplete or Wrong Value" + "\n");
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void algorithmComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_algorithmComboItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String item = (String) evt.getItem();
            if (item.equals("Apriori")) {
                log.append("Apriori Algorithm Selected\n");
                maxitemText.setEditable(false);
                algoritma = 1;
                individuCheck.setEnabled(false);
            } else {
                log.append("fuzzy c-Covering Algorithm Selected\n");
                if (useexisting == false) {
                    maxitemText.setEditable(true);
                }
                algoritma = 2;
                individuCheck.setEnabled(true);
            }
        }
    }//GEN-LAST:event_algorithmComboItemStateChanged

    private void savelogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savelogButtonActionPerformed
        BufferedWriter writer = null;
        Component frame = null;
        Component frame2 = null;
        try {
            JFileChooser jfc = new JFileChooser();
            jfc.showSaveDialog(this);

            writer = new BufferedWriter(new FileWriter(jfc.getSelectedFile().getPath() + ".txt"));
            writer.write(log.getText());
            JOptionPane.showMessageDialog(frame, "Log saved in " + jfc.getSelectedFile().getName());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame2, "Log save failed.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
            }
        }
    }//GEN-LAST:event_savelogButtonActionPerformed

    private void individuCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_individuCheckItemStateChanged
        // TODO add your handling code here:
        Object source = evt.getItemSelectable();
        if (source == individuCheck) {
            individuSupport = true;
        }
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            individuSupport = false;
        }
    }//GEN-LAST:event_individuCheckItemStateChanged

    private void bydateCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bydateCheckItemStateChanged
        // TODO add your handling code here:
        Object source = evt.getItemSelectable();
        if (source == bydateCheck) {
            fromChooser.setEnabled(true);
            untilChooser.setEnabled(true);
            bydate = true;
        }
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            fromChooser.setEnabled(false);
            untilChooser.setEnabled(false);
            bydate = false;
        }
    }//GEN-LAST:event_bydateCheckItemStateChanged

    /**
     * @param args the command line arguments
     */
    public void Process(String from, String until, double minsupport, double minconfidence, String prefix, Boolean individuSupport, JTextArea log, Integer algoritma, Integer maxitem, Boolean useexisting) {
        Apriori ap = new Apriori();
        Fuzzy fz = new Fuzzy();
        ap.setLg(this);
        fz.setLg(this);
        System.out.println(algoritma);
        if (algoritma == 1) {
            ap.prosesApriori(from, until, minsupport, minconfidence, prefix, useexisting);
        } else if (algoritma == 2) {
            fz.prosesFuzzy(from, until, minsupport, minconfidence, prefix, individuSupport, maxitem, useexisting);
        }

    }

    public void getPrefixAndDate() {
        prefix = prefixText.getText();
        log.append("Result table prefix : " + prefixText.getText() + "\n");
        if (bydate == true) {
            from = fromChooser.getDate();
            until = untilChooser.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            fromDate = sdf.format(from);
            SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
            untilDate = sdf2.format(until);
            log.append("From : " + fromDate + "\n");
            log.append("Until : " + untilDate + "\n\n");
        }
    }

    public static double getSupportIndividuDialog() {
        Component frame1 = null;
        Component frame2 = null;
        boolean cek = false;
        double input = 0;
        do {
            try {
                input = Double.parseDouble(JOptionPane.showInputDialog(frame2, "(range 0-1) Minimum Support " + inputIndividuK + " :"));
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(frame1, "Wrong value.");
            }
            if ((input > 0) && (input < 1)) {
                cek = true;
            }
        } while (!cek);
        inputIndividuK++;
        return input;
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AnalysisProsesUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JComboBox algorithmCombo;
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox bydateCheck;
    private com.toedter.calendar.JDateChooser fromChooser;
    private javax.swing.JCheckBox individuCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel maxitemLabel;
    private javax.swing.JTextField maxitemText;
    private javax.swing.JTextField minconfidenceText;
    private javax.swing.JTextField minsupportText;
    private javax.swing.JTextField prefixText;
    private javax.swing.JLabel progress;
    private javax.swing.JButton savelogButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton submitButton;
    private com.toedter.calendar.JDateChooser untilChooser;
    private javax.swing.JButton viewresultButton;
    // End of variables declaration//GEN-END:variables

    public void write(String pesan) {
        log.append(pesan);
    }

    public void loading(String pesan) {
        progress.setText(pesan);
    }

    public void loadingdone(Boolean kondisi) {
        ProgressBar.setIndeterminate(kondisi);
        viewresultButton.setEnabled(!kondisi);
        savelogButton.setEnabled(!kondisi);
    }
}
